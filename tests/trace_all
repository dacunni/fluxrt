#!/usr/bin/python

import glob
import os
import subprocess
import argparse

job_base_path = "jobs"
base_cmd = "trace_scene"

ap = argparse.ArgumentParser()

ap.add_argument('-s', '--scenedir', default="../../scenes/quicklook")
# This option may require equals syntax to handle dashes (eg: --traceopt="-s 100")
ap.add_argument('-o', '--traceopt', default="-s 10 -d 3 -t 3")
ap.add_argument('-n', '--dryrun', action='store_const', const=True, default=False)
ap.add_argument('-v', '--verbose', action='store_const', const=True, default=False)

options = ap.parse_args()

print(options)

# TODO - param for this
bin_path = os.path.abspath('.')

options.scenedir = os.path.abspath(options.scenedir)

# Update paths
os.environ['PATH'] = bin_path + ":" + os.environ['PATH']

print("Scene Path = {}".format(options.scenedir))
print("Trace Options = {}".format(options.traceopt))
if options.dryrun:
    print("Dry run enabled")

scenes = glob.glob(options.scenedir + "/*")

print("Found {} scenes".format(len(scenes)))

if len(scenes) < 1:
    quit()

def run_dir(run_id):
    return "{:06}".format(run_id)

def run_path(run_id):
    return "{}/{}".format(job_base_path, run_dir(run_id))

def make_new_run():
    # Determine ID for this run
    run_id = 0
    
    while os.path.exists(run_path(run_id)):
        run_id += 1
    
    if not options.dryrun:
        os.makedirs(run_path(run_id))

        latest_link_path = '{}/latest'.format(job_base_path)
        try:
            os.unlink(latest_link_path)
        except:
            pass
        os.symlink(run_dir(run_id), latest_link_path)
    
    print("Run ID = {}".format(run_id))

    return run_id

run_id = make_new_run()

init_cwd = os.getcwd()

html_summary = ""

job_id = 0
for scene in scenes:
    job_dir = "{:04}".format(job_id)
    job_path = "{}/{}".format(run_path(run_id), job_dir)
    print("Job ID = {} Path = {} Scene = {}".format(job_id, job_path, scene))

    if not options.dryrun:
        if not os.path.exists(job_path):
            os.makedirs(job_path)
        os.chdir(job_path)

    cmd = "{} {} {}".format(base_cmd, options.traceopt, scene)
    print("Command = {}".format(cmd))

    # Execute command
    if not options.dryrun:
        cmd_output = subprocess.check_output(cmd, shell=True,
                                             stderr=subprocess.STDOUT)
        if options.verbose:
            print(cmd_output)

        with open("output.txt", "w") as output_file:
            output_file.write(cmd_output)

    #html_summary += "<div><a href=\"{}/trace_color.png\">{}</a></div>\n".format(job_dir, job_dir)
    html_summary += """
        <div>
            <img src=\"{}/trace_color.png\"></img>
            <div class=\"jobid\">{}</div>
            <div class=\"scenefile\">{}</div>
        </div>\n
        """.format(job_dir, job_dir, scene)
    
    os.chdir(init_cwd)
    
    job_id += 1

html_summary = """
    <html><body>
    """ + html_summary + """
    </body></html>
"""
with open("{}/summary.html".format(run_path(run_id)), "w") as output_file:
    output_file.write(html_summary)

print(html_summary)

